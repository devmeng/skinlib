Index: skinlib/src/main/java/com/devmeng/skinlib/skin/SkinManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.devmeng.skinlib.skin\r\n\r\nimport android.app.Application\r\nimport android.content.pm.PackageManager\r\nimport android.content.res.AssetManager\r\nimport android.content.res.Resources\r\nimport com.devmeng.skinlib.skin.entity.Skin\r\nimport com.devmeng.skinlib.skin.utils.SkinPreference\r\nimport com.devmeng.skinlib.skin.utils.SkinResources\r\nimport com.devmeng.skinlib.skin.utils.Log\r\nimport com.devmeng.skinlib.skin.utils.md5ForFile\r\nimport okhttp3.Callback\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.Request\r\nimport okhttp3.Response\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\nimport java.io.IOException\r\nimport java.util.*\r\n\r\n/**\r\n * Created by devmeng\r\n * Version : 1\r\n * Description :\r\n * 皮肤管理类:\r\n * 1.通过反射 AssetManager 将皮肤的 asset 资源文件路径添加到 mApkAssets[] 该集合中\r\n * 并与新建的 Resources 类做关联（ Resources constructor 已经弃用建议后期修改为《/*注释内容*/》并处理有关 Bug）\r\n * @see AssetManager\r\n * @see Resources\r\n * 2.通过 PackageManager 获取皮肤包所在的 apk 的包名，以获取皮肤包内的资源\r\n * @see PackageManager\r\n * 3.通知观察者\r\n *\r\n */\r\nclass SkinManager private constructor() : Observable() {\r\n\r\n    private lateinit var application: Application\r\n\r\n    companion object {\r\n\r\n        @JvmStatic\r\n        val instance by lazy(LazyThreadSafetyMode.SYNCHRONIZED) {\r\n            SkinManager()\r\n        }\r\n\r\n        @JvmStatic\r\n        fun init(\r\n            application: Application,\r\n            activityLifecycleCallbacks: Application.ActivityLifecycleCallbacks\r\n            = SkinActivityLifecycle(),\r\n            isApplicationTypeface: Boolean = false,\r\n            isDebug: Boolean = true\r\n        ): SkinManager {\r\n            application.registerActivityLifecycleCallbacks(activityLifecycleCallbacks)\r\n            SkinPreference.init(application.applicationContext)\r\n            SkinResources.init(application.applicationContext)\r\n            instance.application = application\r\n            IS_APPLICATION_TYPEFACE = isApplicationTypeface\r\n            BUILD_TYPE = isDebug\r\n            return instance\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载皮肤包\r\n     * @param skinPath 如果皮肤包路径不为空则加载皮肤，反之还原皮肤\r\n     * 1.使用 SkinResources 通过自定义的 Resources 和 AssetManager\r\n     * 加载 PackageManager 获取的外部 apk 皮肤包\r\n     * @see SkinResources.applySkinPackage\r\n     * 2.使用 SkinPreference 储存皮肤包路径\r\n     * @see SkinPreference\r\n     * 3.通知观察者\r\n     */\r\n    fun loadSkin(skinPath: String = EMPTY) {\r\n        if (skinPath.isNotEmpty()) {\r\n            try {\r\n                Log.d(\"skinPath -> $skinPath\")\r\n                val assetManager = AssetManager::class.java.newInstance()\r\n                /*val method =\r\n                    assetManager.javaClass.getMethod(\r\n                        \"addAssetPathInternal\",\r\n                        String::class.java,\r\n                        Boolean::class.java,\r\n                        Boolean::class.java\r\n                    )*/\r\n                val method = assetManager.javaClass.getMethod(\r\n                    \"addAssetPath\",\r\n                    String::class.java\r\n                )\r\n//                method.invoke(assetManager, skinPath, false, false)\r\n                method.invoke(assetManager, skinPath)\r\n                val resources = application.resources\r\n                //通过反射获取 ResourceImpl 并将 mAssets 等变量赋值\r\n\r\n                /*\r\n                val resourcesImpl =\r\n                    Resources::class.java.classLoader!!\r\n                        .loadClass(\"android.content.res.ResourcesImpl\")\r\n\r\n                val assets = resourcesImpl.getDeclaredField(\"mAssets\")\r\n                val metrics = resourcesImpl.getDeclaredField(\"mMetrics\")\r\n                val config = resourcesImpl.getDeclaredField(\"mConfiguration\")\r\n                metrics.isAccessible = true\r\n                config.isAccessible = true\r\n\r\n                assets.set(resourcesImpl, assetManager)\r\n                metrics.set(resourcesImpl, resources.displayMetrics)\r\n                config.set(resourcesImpl, resources.configuration)\r\n\r\n                val mResourcesImpl = Resources::class.java.getField(\"mResourcesImpl\")\r\n\r\n                mResourcesImpl.set(resources, resourcesImpl)\r\n*/\r\n                val skinResources =\r\n                    Resources(assetManager, resources.displayMetrics, resources.configuration)\r\n\r\n                //获取 skinPath 所在的 Apk 包名\r\n                val pkgManager = application.packageManager\r\n                val packageArchiveInfo =\r\n                    pkgManager.getPackageArchiveInfo(skinPath, PackageManager.GET_ACTIVITIES)\r\n                if (packageArchiveInfo != null) {\r\n                    val pkgName = packageArchiveInfo.packageName\r\n                    //存储并应用皮肤包资源，此时还没有进行皮肤的切换\r\n                    SkinPreference.instance.setSkinPath(skinPath)\r\n                    SkinResources.instance.applySkinPackage(skinResources, pkgName)\r\n                }\r\n\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        } else {\r\n            //还原皮肤\r\n            SkinPreference.instance.setSkinPath()\r\n            SkinResources.instance.reset()\r\n        }\r\n        //通知观察者并在观察者的 update 方法中进行皮肤的应用\r\n        setChanged()\r\n        notifyObservers()\r\n    }\r\n\r\n    /**\r\n     * 加载网络皮肤\r\n     * @param skin 皮肤实体类\r\n     */\r\n    fun loadSkin(skin: Skin, md5: String = EMPTY) {\r\n        val skins = File(application.applicationContext.filesDir, \"skins\")\r\n        if (skins.exists().and(skins.isFile)) {\r\n            skins.delete()\r\n        }\r\n        skins.mkdir()\r\n        val skinFile = skin.getSkinFile(skins)\r\n        var cmd5 = md5\r\n        if (skin.md5.isNotEmpty().and(cmd5.isEmpty())) {\r\n            cmd5 = md5ForFile(skinFile)!!\r\n        }\r\n        if (skinFile.exists()) {\r\n            //有就应用\r\n            if (skin.md5 == cmd5) {\r\n                Log.d(\"skin 文件存在\")\r\n                loadSkin(skin.path)\r\n                Log.d(\"load skin\")\r\n            } else {\r\n                throw IllegalArgumentException(\"皮肤包已存在，但 MD5 值不匹配，请检查 MD5 计算规则是否相同\")\r\n            }\r\n            return\r\n        }\r\n        val tempFile = File(skinFile.parentFile, \"${skin.name}.temp\")\r\n\r\n        //下载皮肤包\r\n        val request = Request.Builder().url(skin.skinUrl).build()\r\n        OkHttpClient.Builder().build().newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: okhttp3.Call, e: IOException) {\r\n                e.printStackTrace()\r\n            }\r\n\r\n            override fun onResponse(call: okhttp3.Call, response: Response) {\r\n                val bs = response.body.byteStream()\r\n                val fileOut = FileOutputStream(tempFile)\r\n                try {\r\n                    var length: Int\r\n                    val bytes = ByteArray(1024)\r\n                    while (bs.read(bytes).also { length = it } != -1) {\r\n                        fileOut.write(bytes, 0, length)\r\n                    }\r\n                    if (skin.md5 == cmd5) {\r\n                        tempFile.renameTo(skinFile)\r\n                        Log.d(\"md5 相同\")\r\n                    } else {\r\n                        throw IllegalArgumentException(\"MD5 值不匹配，请检查 MD5 计算规则是否相同\")\r\n                    }\r\n                    loadSkin(skin.path)\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                } finally {\r\n                    fileOut.close()\r\n                    bs.close()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/skinlib/src/main/java/com/devmeng/skinlib/skin/SkinManager.kt b/skinlib/src/main/java/com/devmeng/skinlib/skin/SkinManager.kt
--- a/skinlib/src/main/java/com/devmeng/skinlib/skin/SkinManager.kt	(revision 5fdc6fb2d72d3d5bfa44d5ce147a8c6239bda706)
+++ b/skinlib/src/main/java/com/devmeng/skinlib/skin/SkinManager.kt	(date 1670339305879)
@@ -5,9 +5,9 @@
 import android.content.res.AssetManager
 import android.content.res.Resources
 import com.devmeng.skinlib.skin.entity.Skin
+import com.devmeng.skinlib.skin.utils.Log
 import com.devmeng.skinlib.skin.utils.SkinPreference
 import com.devmeng.skinlib.skin.utils.SkinResources
-import com.devmeng.skinlib.skin.utils.Log
 import com.devmeng.skinlib.skin.utils.md5ForFile
 import okhttp3.Callback
 import okhttp3.OkHttpClient
